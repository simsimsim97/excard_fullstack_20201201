[{"C:\\Users\\Dell\\Desktop\\testproject\\my-app\\src\\App.js":"1","C:\\Users\\Dell\\Desktop\\testproject\\my-app\\src\\components\\TaskModal.js":"2","C:\\Users\\Dell\\Desktop\\testproject\\my-app\\src\\index.js":"3"},{"size":2302,"mtime":1606830734142,"results":"4","hashOfConfig":"5"},{"size":3769,"mtime":1606830566195,"results":"6","hashOfConfig":"5"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"179msr4",{"filePath":"10","messages":"11","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":2,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Dell\\Desktop\\testproject\\my-app\\src\\App.js",[],"C:\\Users\\Dell\\Desktop\\testproject\\my-app\\src\\components\\TaskModal.js",["15","16","17","18","19","20","21","22"],"import React, { useState, useEffect } from 'react'\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\n/**\r\n * Author : Sim\r\n */\r\nconst TaskModal = props => {\r\n    const modalVisible = props.modalVisible;\r\n    const setModalVisible = props.setModalVisible;\r\n    const taskSelected = props.taskSelected;\r\n    const setTaskSelected = props.setTaskSelected;\r\n\r\n    const [id, setId] = useState('');\r\n    const [name, setName] = useState('');\r\n    const [desc, setDesc] = useState('');\r\n\r\n    useEffect(() => {\r\n        if (taskSelected) {\r\n            setId(taskSelected.id);\r\n            setName(taskSelected.name);\r\n            setDesc(taskSelected.desc);\r\n        }\r\n    }, [taskSelected])\r\n\r\n    const saveTask = (name, desc) => {\r\n        var taskInStorage = JSON.parse(localStorage.getItem(\"tasks\"));\r\n\r\n        var data = { \"name\": name, \"desc\": desc };\r\n        var tasks = [];\r\n\r\n        if (taskInStorage.length == 0) {\r\n            data = { ...data, ['id']: 1 };\r\n            tasks[0] = data;\r\n            localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n        } else {\r\n            var lastId = taskInStorage[taskInStorage.length - 1].id;\r\n            var id = lastId + 1;\r\n            data = { ...data, ['id']: id };\r\n\r\n            tasks = [...taskInStorage, data];\r\n            localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n        }\r\n        closeModalAction();\r\n    }\r\n\r\n    const updateTask = (id, name, desc) => {\r\n        let storageTasks = JSON.parse(localStorage.getItem(\"tasks\"));\r\n        let updatedTasks = storageTasks.map(task => (task.id == id ? Object.assign({}, task, { id, name, desc }) : task));\r\n        localStorage.setItem(\"tasks\", JSON.stringify(updatedTasks));     \r\n\r\n        closeModalAction();\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        if (name == '' || desc == '') {\r\n            alert(\"Please fill in all the fields\");\r\n        } else {\r\n            if (id == undefined) {\r\n                saveTask(name, desc);\r\n            } else {\r\n                updateTask(id, name, desc);\r\n            }\r\n        }\r\n        // e.preventDefault();\r\n    }\r\n\r\n    const closeModalAction = () => {\r\n        setName('');\r\n        setDesc('');\r\n        setTaskSelected({});\r\n        setModalVisible(!modalVisible);\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            show={modalVisible} onHide={() => closeModalAction()} animation={true}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"example-custom-modal-styling-title\">\r\n                    Tasks\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <form onSubmit={handleSubmit}>\r\n                    <input type=\"id\" name=\"id\" defaultValue={taskSelected && taskSelected.name} defaultValue={taskSelected && taskSelected.id} hidden /><br />\r\n                    <label>\r\n                        <span class=\"text\">Task Name</span>\r\n                        <input type=\"name\" name=\"name\" onChange={(e) => setName(e.target.value)} defaultValue={taskSelected && taskSelected.name} /><br />\r\n                    </label>\r\n                    <br />\r\n                    <label>\r\n                        <span class=\"text\">Task Desc.</span>\r\n                        <input type=\"desc\" name=\"desc\" onChange={(e) => setDesc(e.target.value)} defaultValue={taskSelected && taskSelected.desc} /><br />\r\n                    </label><br />\r\n                    <div class=\"align-right\">\r\n                        <button type=\"submit\">Submit</button>\r\n                    </div>\r\n                </form>\r\n            </Modal.Body>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default TaskModal;\r\n","C:\\Users\\Dell\\Desktop\\testproject\\my-app\\src\\index.js",[],{"ruleId":"23","severity":1,"message":"24","line":31,"column":34,"nodeType":"25","messageId":"26","endLine":31,"endColumn":36},{"ruleId":"27","severity":1,"message":"28","line":32,"column":31,"nodeType":"29","messageId":"30","endLine":32,"endColumn":40,"fix":"31"},{"ruleId":"27","severity":1,"message":"28","line":38,"column":31,"nodeType":"29","messageId":"30","endLine":38,"endColumn":41,"fix":"32"},{"ruleId":"23","severity":1,"message":"24","line":48,"column":62,"nodeType":"25","messageId":"26","endLine":48,"endColumn":64},{"ruleId":"23","severity":1,"message":"24","line":55,"column":18,"nodeType":"25","messageId":"26","endLine":55,"endColumn":20},{"ruleId":"23","severity":1,"message":"24","line":55,"column":32,"nodeType":"25","messageId":"26","endLine":55,"endColumn":34},{"ruleId":"23","severity":1,"message":"24","line":58,"column":20,"nodeType":"25","messageId":"26","endLine":58,"endColumn":22},{"ruleId":"33","severity":1,"message":"34","line":88,"column":97,"nodeType":"35","endLine":88,"endColumn":143},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-useless-computed-key","Unnecessarily computed property ['id'] found.","Property","unnecessarilyComputedProperty",{"range":"36","text":"37"},{"range":"38","text":"37"},"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",[953,959],"'id'",[1216,1222]]